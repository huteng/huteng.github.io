<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ronhu</title>
    <description>知行合一</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 30 Jun 2018 16:38:46 +0800</pubDate>
    <lastBuildDate>Sat, 30 Jun 2018 16:38:46 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>从 SVN 到 Git</title>
        <description>&lt;p&gt;本文从 Git 与 SVN 的对比入手，介绍如何通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Git-SVN&lt;/code&gt;开始使用 Git，并总结平时工作高频率使用到的 Git 常用命令。&lt;/p&gt;

&lt;h2 id=&quot;一git-vs-svn&quot;&gt;一、Git vs SVN&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Git 和 SVN 孰优孰好，每个人有不同的体验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;git是分布式的svn是集中式的&quot;&gt;Git是分布式的，SVN是集中式的&lt;/h3&gt;
&lt;p&gt;这是 Git 和 SVN 最大的区别。若能掌握这个概念，两者区别基本搞懂大半。因为 Git 是分布式的，所以 Git 支持离线工作，在本地可以进行很多操作，包括接下来将要重磅推出的分支功能。而 SVN 必须联网才能正常工作。&lt;/p&gt;

&lt;h3 id=&quot;git复杂概念多svn简单易上手&quot;&gt;Git复杂概念多，SVN简单易上手&lt;/h3&gt;
&lt;p&gt;所有同时掌握 Git 和 SVN 的开发者都必须承认，Git 的命令实在太多了，日常工作需要掌握&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;等，若要熟练掌握，还必须掌握&lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;的区别，&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;的区别等，除此之外，还有&lt;code class=&quot;highlighter-rouge&quot;&gt;cherry-pick&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;submodule&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;stash&lt;/code&gt;等功能，仅是这些名词听着都很绕。&lt;/p&gt;

&lt;p&gt;在易用性这方面，SVN 会好得多，简单易上手，对新手很友好。但是从另外一方面看，Git 命令多意味着功能多，若我们能掌握大部分 Git 的功能，体会到其中的奥妙，会发现再也回不去 SVN 的时代了。&lt;/p&gt;

&lt;h3 id=&quot;git分支廉价svn分支昂贵&quot;&gt;Git分支廉价，SVN分支昂贵&lt;/h3&gt;
&lt;p&gt;在版本管理里，分支是很常使用的功能。在发布版本前，需要发布分支，进行大需求开发，需要 feature 分支，大团队还会有开发分支，稳定分支等。在大团队开发过程中，常常存在创建分支，切换分支的需求。&lt;/p&gt;

&lt;p&gt;Git 分支是指针指向某次提交，而 SVN 分支是拷贝的目录。这个特性使 Git 的分支切换非常迅速，且创建成本非常低。&lt;/p&gt;

&lt;p&gt;而且 Git 有本地分支，SVN 无本地分支。在实际开发过程中，经常会遇到有些代码没写完，但是需紧急处理其他问题，若我们使用 Git，便可以创建本地分支存储没写完的代码，待问题处理完后，再回到本地分支继续完成代码。&lt;/p&gt;

&lt;h2 id=&quot;二git-核心概念&quot;&gt;二、Git 核心概念&lt;/h2&gt;
&lt;p&gt;Git 最核心的一个概念就是工作流。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;工作区(Workspace)是电脑中实际的目录。&lt;/li&gt;
  &lt;li&gt;暂存区(Index)类似于缓存区域，临时保存你的改动。&lt;/li&gt;
  &lt;li&gt;仓库区(Repository)，分为本地仓库和远程仓库。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从 SVN 切换到 Git，最难理解并且最不能理解的是暂存区和本地仓库。熟练使用 Git 后，会发现这简直是神设计，由于这两者的存在，使许多工作变得易管理。&lt;/p&gt;

&lt;p&gt;通常提交代码分为几步：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;从工作区提交到暂存区&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;从暂存区提交到本地仓库&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;git svn dcommit&lt;/code&gt;从本地仓库提交到远程仓库&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一般来说，记住以下命令，便可进行日常工作了（图片来源于网络）：
&lt;img src=&quot;http://ronhu.me/img/git.jpg&quot; alt=&quot;git.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三git-svn常用命令&quot;&gt;三、Git-SVN常用命令&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;本节命令针对使用 Git-SVN 的开发者，请务必掌握。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;若服务器使用的 SVN，但是本地想要体验 Git 的本地分支，离线操作等功能，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Git-SVN&lt;/code&gt;功能。&lt;/p&gt;

&lt;p&gt;常用操作如下（图片来源于网络）：
&lt;img src=&quot;http://ronhu.me/img/git-svn-workflow.png&quot; alt=&quot;git-svn workflow&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下载一个 SVN 项目和它的整个代码历史，并初始化为 Git 代码库
$ git svn clone -s [repository]

# 查看当前版本库情况
$ git svn info

# 取回远程仓库所有分支的变化
$ git svn fetch

# 取回远程仓库当前分支的变化，并与本地分支变基合并
$ git svn rebase 

# 上传当前分支的本地仓库到远程仓库
$ git svn dcommit

# 拉取新分支，并提交到远程仓库
$ svn copy [remote_branch] [new_remote_branch] -m [message]

# 创建远程分支对应的本地分支
$ git checkout -b [local_branch] [remote_branch]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;四初始化&quot;&gt;四、初始化&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;从本节开始，除特殊说明，以下命令均适用于 Git 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Git-SVN&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 在当前目录新建一个Git代码库
$ git init

# 下载一个项目和它的整个代码历史 [Git only]
$ git clone [url]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;五配置&quot;&gt;五、配置&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 列举所有配置
$ git config -l

# 为命令配置别名
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.st status
$ git config --global alias.br branch

# 设置提交代码时的用户信息
$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Git 用户的配置文件位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitconfig &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git 单个仓库的配置文件位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/$PROJECT_PATH/.git/config&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;六增删文件&quot;&gt;六、增删文件&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 添加当前目录的所有文件到暂存区
$ git add .

# 添加指定文件到暂存区
$ git add &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; ...

# 添加指定目录到暂存区，包括其子目录
$ git add &amp;lt;dir&amp;gt;

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;把文件名 file1 添加到 .gitignore 文件里，Git 会停止跟踪 file1 的状态。&lt;/p&gt;

&lt;h2 id=&quot;七分支&quot;&gt;七、分支&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 列出所有本地分支
$ git branch

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [new_branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个 commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支，-D 参数强制删除分支
$ git branch -d [branch-name]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;八提交&quot;&gt;八、提交&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 提交暂存区到仓库区
$ git commit -m [message]

# 提交工作区与暂存区的变化直接到仓库区
$ git commit -a

# 提交时显示所有 diff 信息
$ git commit -v

# 提交暂存区修改到仓库区，合并到上次修改，并修改上次的提交信息
$ git commit --amend -m [message]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;九拉取&quot;&gt;九、拉取&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下载远程仓库的所有变动 [Git only]
$ git fetch [remote]

# 显示所有远程仓库 [Git only]
$ git remote -v

# 显示某个远程仓库的信息 [Git only]
$ git remote show [remote]

# 增加一个新的远程仓库，并命名 [Git only]
$ git remote add [remote-name] [url]

# 取回远程仓库的变化，并与本地分支合并，[Git only], 若使用 Git-SVN，请查看第三节
$ git pull [remote] [branch]

# 取回远程仓库的变化，并与本地分支变基合并，[Git only], 若使用 Git-SVN，请查看第三节
$ git pull --rebase [remote] [branch]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;十撤销&quot;&gt;十、撤销&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复暂存区当前目录的所有文件到工作区
$ git checkout .

# 恢复工作区到指定 commit
$ git checkout [commit]

# 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次 commit 保持一致
$ git reset --hard

# 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定 commit，同时重置暂存区和工作区，与指定 commit 一致
$ git reset --hard [commit]

# 新建一个 commit，用于撤销指定 commit
$ git revert [commit]

# 将未提交的变化放在储藏区
$ git stash

# 将储藏区的内容恢复到当前工作区
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;十一查询&quot;&gt;十一、查询&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 查看工作区文件修改状态
$ git status               

# 查看工作区文件修改具体内容   
$ git diff [file]

# 查看暂存区文件修改内容
$ git diff --cached [file] 

# 查看版本库修改记录
$ git log                  

# 查看某人提交记录
$ git log --author=someone 

# 查看某个文件的历史具体修改内容
$ git log -p [file]        

# 查看某次提交具体修改内容
$ git show [commit]         
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;十二其他&quot;&gt;十二、其他&lt;/h2&gt;
&lt;h3 id=&quot;写在后面&quot;&gt;写在后面&lt;/h3&gt;
&lt;p&gt;从 SVN 到 Git，除本文列举的基础概念和常用命令，包括但不限于&lt;code class=&quot;highlighter-rouge&quot;&gt;如何从 SVN 服务器切换到 Git 服务器&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;分支模型管理&lt;/code&gt;等也非常重要。本文篇幅有限，针对没有介绍到但很重要的知识点会列举到参考资料里，希望作为本文的延伸阅读。&lt;/p&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot;&gt;Git Pro Books&lt;/a&gt; Git 权威指南&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.worldhello.net/gotgit/04-git-model/070-git-svn.html&quot;&gt;Git和SVN协同模型&lt;/a&gt; 详细介绍 Git-SVN 协同模型的使用原理与注意点&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&quot;&gt;常用 Git 命令清单&lt;/a&gt; 总结得非常详细的清单，与本文部分内容重合并互补&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xirong/my-git/blob/master/why-git.md&quot;&gt;SVN 和 Git 在日常使用中的明显差异&lt;/a&gt; 介绍了 Git 和 SVN 的区别，可作为本文的延伸阅读&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow&quot;&gt;git-flow 的工作流程&lt;/a&gt; 通俗易懂的介绍了 git-flow 的基础工作流程&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E4%B8%8E%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F-%E8%BF%81%E7%A7%BB%E5%88%B0-Git&quot;&gt;SVN 迁移到 Git&lt;/a&gt; 服务器从 SVN 迁移到 Git 的具体操作方法&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 30 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/read/2018/06/30/%E4%BB%8E-SVN-%E5%88%B0-Git/</link>
        <guid isPermaLink="true">http://localhost:4000/read/2018/06/30/%E4%BB%8E-SVN-%E5%88%B0-Git/</guid>
        
        <category>Git</category>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>Chromium智能指针使用指南</title>
        <description>&lt;h4 id=&quot;什么是智能指针&quot;&gt;什么是智能指针？&lt;/h4&gt;

&lt;p&gt;智能指针是一种特殊类型的“局部对象”，表现如同裸指针，但是具备&lt;code class=&quot;highlighter-rouge&quot;&gt;离开作用域(out of scope)时主动释放所指向对象&lt;/code&gt;的能力。因为C++没有垃圾回收机制，因此智能指针的特性显得非常重要。&lt;/p&gt;

&lt;p&gt;下面是最常用智能指针类型&lt;code class=&quot;highlighter-rouge&quot;&gt;std::unique_ptr&amp;lt;&amp;gt;&lt;/code&gt;的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;// 我们可以在构造std::unique_prt&amp;lt;&amp;gt;的时候传入指针
std::unique_ptr value(base::JSONReader::Read(data));
std::unique_ptr foo_ptr(new Foo(...));

// ...或者使用reset()
std::unique_ptr bar_ptr;      // 与 &quot;Bar* bar_ptr = nullptr;&quot; 相似.
bar_ptr.reset(new Bar(...));  // 此时 |bar_ptr| 不为空且持有对象 

// 我们可以用 () 检查std::unique_ptr&amp;lt;&amp;gt;是否为空
if (!value) return false;

// get() 访问持有的裸指针
Foo* raw_ptr = foo_ptr.get();

// 我们可以像使用裸指针一样调用std::unique_ptr&amp;lt;&amp;gt;的方法
DictionaryValue* dict;
if (!value-&amp;gt;GetAsDictionary(&amp;amp;dict)) return false;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;为什么我们要使用智能指针&quot;&gt;为什么我们要使用智能指针？&lt;/h4&gt;

&lt;p&gt;即使对象的创建和析构时机不确定，使用智能指针确保我们能正确释放对象。无论方法里有再多且逻辑复杂的路径，智能指针总能确保局部变量正确的释放，且能明确对象的所有权，避免程序内存泄漏或者对象重复释放。最后，在方法调用时，需要明确指出对象拥有权的转移和结果。&lt;/p&gt;

&lt;h4 id=&quot;存在哪些类型的智能指针&quot;&gt;存在哪些类型的智能指针？&lt;/h4&gt;

&lt;p&gt;在Chromium里最常用的两种智能指针类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;std::unique_ptr&amp;lt;&amp;gt;&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scoped_refptr&amp;lt;&amp;gt;&lt;/code&gt;。前者适用于单一所有权的对象，后者适用于引用计数的对象（然而，通常应该避免使用引用计数的对象）。如果你比较熟悉C++11，会发现&lt;code class=&quot;highlighter-rouge&quot;&gt;scoepd_refptr&amp;lt;&amp;gt;&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;std::shared_ptr&amp;lt;&amp;gt;&lt;/code&gt;用法很相似。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/base/memory/&quot;&gt;base/memory/&lt;/a&gt; 还定义了其余几种类型的对象：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;linked_ptr&amp;lt;&amp;gt;&lt;/code&gt; 用于在C++11之前存放智能指针对象，已被废弃。现在Chromium已经支持C++11了，我们不应该再使用&lt;code class=&quot;highlighter-rouge&quot;&gt;linked_ptr&amp;lt;&amp;gt;&lt;/code&gt;了，而应该在STL容器里使用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::unique_ptr&amp;lt;&amp;gt;&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ScopedVector&amp;lt;&amp;gt;&lt;/code&gt;也被废弃了。它是一种vector，并且持有容器内对象的所有权。请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;std::unique_ptr&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;代替。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakPtr&amp;lt;&amp;gt;&lt;/code&gt;实际上不是智能指针。它的表现像指针类型，但是并不能用来自动释放对象，通常用作追踪其它地方拥有的对象是否依然存活，当追踪对象释放时，&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakPtr&amp;lt;&amp;gt;&lt;/code&gt;会自动的置为&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;。（但是依然需要在解引用前判断是否为&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;，因为解引用&lt;code class=&quot;highlighter-rouge&quot;&gt;null WeakPtr&amp;lt;&amp;gt;&lt;/code&gt;等于于解引用&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;，而不是no-op。）&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakPtr&amp;lt;&amp;gt;&lt;/code&gt;与C++11的&lt;code class=&quot;highlighter-rouge&quot;&gt;std::weak_ptr&amp;lt;&amp;gt;&lt;/code&gt;作用比较相似，但是使用了不同的API并且少了许多使用限制。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何选择使用哪种智能指针&quot;&gt;如何选择使用哪种智能指针？&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;单一所有权的对象&lt;/strong&gt;。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::unique_ptr&lt;/code&gt;。需要注意的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;std::unique_ptr&lt;/code&gt;持有的需要必须是非引用计数的，并且分配在堆上的对象。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;无所有权的对象&lt;/strong&gt;。使用裸指针或者&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakPtr&amp;lt;&amp;gt;&lt;/code&gt;。注意&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakPtr&amp;lt;&amp;gt;&lt;/code&gt;只能在创建它的线程解引用（通常使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakPtrFactory&amp;lt;&amp;gt;&lt;/code&gt;）。如果你需要在对象释放前后立刻执行某些操作，那么可能使用callback或notification更适合，而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakPtr&amp;lt;&amp;gt;&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;引用计数的对象&lt;/strong&gt;。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;scoped_refptr&amp;lt;&amp;gt;&lt;/code&gt;，但是最好是重新考虑使用引用计数对象是否合理。引用计数对象很难明确拥有权和析构顺序，特别是在多线程环境中。总是有方法来重新设计引对象层级来避免引用计数的。限制每个类都只能在单个线程工作，并且使用&lt;code class=&quot;highlighter-rouge&quot;&gt;PostTask()&lt;/code&gt;确保调用在正确的线程，这样有助于在多线程中避免引用计数。&lt;code class=&quot;highlighter-rouge&quot;&gt;base::Bind()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakPtr&amp;lt;&amp;gt;&lt;/code&gt;等工具具备在对象释放时自动取消方法调用的能力。Chromium中依然有许多代码在使用引用计数对象，如果你看见Chromium中有代码这样做但并不代表这是合理的解决方案。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;平台特定类型&lt;/strong&gt;。使用平台特定的对象，譬如&lt;code class=&quot;highlighter-rouge&quot;&gt;base::win::ScopedHandle&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;base::win::ScopedComPtr&lt;/code&gt;，或者&lt;code class=&quot;highlighter-rouge&quot;&gt;base::mac::ScopedCFTypeRef&lt;/code&gt;。需要注意的是这些类型使用方式可能和&lt;code class=&quot;highlighter-rouge&quot;&gt;std::unique_ptr&amp;lt;&amp;gt;&lt;/code&gt;不同。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;不同类型指针间调用规定是怎样的&quot;&gt;不同类型指针间调用规定是怎样的？&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.chromium.org/developers/coding-style?pli=1#TOC-Object-ownership-and-calling-conventions&quot;&gt;calling conventions section of the Chromium style guide&lt;/a&gt;有规定。下面列出一些常用的规定。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果方法参数里使用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::unique_ptr&amp;lt;&amp;gt;&lt;/code&gt;	，说明该方法需占用传入参数的所有权，调用方需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::move()&lt;/code&gt;来表明转移对象的所有权。需要注意的是，临时对象不需要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::move()&lt;/code&gt;转移所有权。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;// Foo() 拥有 |bar| 的所有权.
void Foo(std::unique_ptr&amp;lt;Bar&amp;gt; bar);

...
std::unique_ptr&amp;lt;Bar&amp;gt; bar_ptr(new Bar());
Foo(std::move(bar_ptr));          // 调用后，|bar_ptr| 被置为 null.
Foo(std::unique_ptr&amp;lt;Bar&amp;gt;(new Bar()));  // 临时对象不需要调用std::move()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;如果方法的返回值使用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::unique_ptr&amp;lt;&amp;gt;&lt;/code&gt;，说明调用方需要持有返回对象的所有权。这种情况下，当且仅当返回对象类型和临时对象的类型不同时，需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::move()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;class Base { ... };
class Derived : public Base { ... };

// Foo 拥有|base|的所有权, 调用方拥有 返回值对象 的所有权
std::unique_ptr&amp;lt;Base&amp;gt; Foo(std::unique_ptr&amp;lt;Base&amp;gt; base) {
  if (cond) {
    // 转移 |base| 的所有权给调用方
    return base;                           
  }
  
  // 注意这种场景下，方法运行结束时，|base|会被释放掉
  if (cond2) {
    // 临时对象不需要调用std::move()
    return std::unique_ptr&amp;lt;Base&amp;gt;(new Base()));  
  }
  std::unique_ptr&amp;lt;Derived&amp;gt; derived(new Derived());
  // 注意需要使用std::move()，因为|derived|的类型和返回值的类型不同。
  return std::move(derived);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;如果方法传入或者返回裸指针，表示无需所有权转移。Chromium在&lt;code class=&quot;highlighter-rouge&quot;&gt;std::unique_ptr&amp;lt;&amp;gt;&lt;/code&gt;存在之前写的一些代码，或者不熟悉所有权转移的程序员写的代码，可能会在传入或者返回裸指针的时候也使用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::move()&lt;/code&gt;转移了所有权。但是这样做是不安全的，编译器并不能执行正确的表现。去掉这样的代码吧，方法传入或者返回裸指针时，绝对不要转移所有权。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;可以通过引用传递参数或者返回值吗&quot;&gt;可以通过引用传递参数或者返回值吗？&lt;/h4&gt;

&lt;p&gt;不要这样做。&lt;/p&gt;

&lt;p&gt;原理上来说，传入&lt;code class=&quot;highlighter-rouge&quot;&gt;const std::unique_ptr&amp;lt;T&amp;gt; &amp;amp;&lt;/code&gt;参数并且不转移所有权比传入&lt;code class=&quot;highlighter-rouge&quot;&gt;T*&lt;/code&gt;有优势，这样做可以防止调用方传入错误的参数(譬如把 int 转成了 T*)，而且调用方必须确保方法调用周期内传入对象不会被释放。但是，这样调用方就必须把传入对象生成在堆上，即使调用方原本可以使对象生成在栈上。这里传入裸指针相比传入&lt;code class=&quot;highlighter-rouge&quot;&gt;const std::unique_ptr&amp;lt;T&amp;gt; &amp;amp;&lt;/code&gt;的好处是，可以将对象所有权的问题和对象生成的问题解耦。为了简洁和统一，我们避免开发人员去权衡这些利弊，总是使用裸指针就好了。&lt;/p&gt;

&lt;p&gt;有个例外，在lambda表达式中，若将智能指针放在STL容器里作为参数传递，这里为了编译通过，必须使用&lt;code class=&quot;highlighter-rouge&quot;&gt;const std::unique_ptr&amp;lt;T&amp;gt; &amp;amp;&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;我想使用stl容器用来持有指针对象此时可以用智能指针吗&quot;&gt;我想使用STL容器用来持有指针对象。此时可以用智能指针吗？&lt;/h4&gt;

&lt;p&gt;可以。在C++11里，你可以将智能指针放入STL容器内。而且，不要再使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ScopedVector&amp;lt;T&amp;gt;&lt;/code&gt;了，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;std::unique_ptr&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;来替代。同样的，再也不要再使用&lt;code class=&quot;highlighter-rouge&quot;&gt;linked_ptr&amp;lt;T&amp;gt;&lt;/code&gt;了，直接把智能智能放在STL容器里使用即可。&lt;/p&gt;

&lt;h4 id=&quot;引用资料&quot;&gt;引用资料&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/106508/what-is-a-smart-pointer-and-when-should-i-use-one&quot;&gt;StackOverflow guide to smart pointers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Smart_pointer&quot;&gt;Wikipedia article on smart pointers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.webkit.org/coding/RefPtr.html&quot;&gt;Guide to smart pointer usage in WebKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chromium.org/developers/smart-pointer-guidelines&quot;&gt;Smart Pointer Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/read/2018/05/28/chromium_smart_ptr_use_guide/</link>
        <guid isPermaLink="true">http://localhost:4000/read/2018/05/28/chromium_smart_ptr_use_guide/</guid>
        
        <category>C++</category>
        
        
        <category>read</category>
        
      </item>
    
  </channel>
</rss>
