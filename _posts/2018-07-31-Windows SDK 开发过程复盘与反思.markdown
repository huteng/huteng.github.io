---

layout: post
category: "read"
title:  "Windows SDK 开发过程复盘与反思"
tags: [Git]

---

###一. 背景

最近接到了一项任务，需要在短时间内封装一个Windows SDK 给外部用户使用。该 SDK 使用 wss 通道，经过一系列身份验证，获取 AuthCode 返回给调用者。分析这项工作对我主要有几个难点：

1. 没使用过 Windows 开发，也对 Visual Studio 完全陌生。
2. 接触过一些 iOS 的 SDK 封装，但对 Windows SDK 的情况几乎不了解。
3. 时间紧张，开发时间短。

在短时间内高质量完成一项之前没接触过的工作。

### 二. 拆分任务

仔细分拆 Windows SDK 的任务，实际上有些地方是自己比较擅长的：

1. C++ 比较熟悉，在企业微信的开发过程中做过很长时间的 C++ 开发。
2. 接口封装的基础知识。对设计模式，抽象等有一定认识，了解怎样是清晰好用的 SDK。

整理出完成这项工作需要的知识点：

1. Visual Studio 的基本使用，Windows 的各种开发工具和开发环境。
2. Windows  websockets 库的选择，目标是库够小，针对多架构兼容性好。
3. 打包 Windows SDK 需要的基本知识，Windows lib、dll 的基本理论。

### 三. 过程记录

####1. 开发环境配置

下载了较为成熟的 Visual Studio 2013，并且配上了 ConEmu，并安装了 Git 、Python 等常用的命令行工具，在这一步上没有遇到太多问题。但是在使用 Visual Studio 2013 的过程中，采用的思路是自我探索，实际上踩了一些坑。如果一开始选择先花半个小时熟悉下基本操作和基本快捷键，会节约一些时间。

#### 2. Websockets 库选择

在 Github 上搜索了 websocket 关键字，用 C++ 过滤看到以下结果

##### 2.1 easywsclient

C++实现，最轻量，不支持 SSL。若支持 SSL，需要改代码，短时间内不允许，故放弃。

##### 2.2 uWebSocket

C++实现，Github 上 star 最多，依赖 boost，SSL，libuv。库本身代码很小，最初选择的便是 uWebSocket，但是【尝试编译】过程中发现依赖库过多，遂放弃。此处可以看到是经过了编译的撞墙后，才发现依赖库过多放弃的。实际上如果刚开始就把依赖库少列为选择 SDK 的标准之一，这里会省很多时间。

##### 2.3 websocketpp

C++实现，库历史比较长，文档比较多，相关参考 demo 非常详细，最后选择了 websocketpp

#### 3. 编译 websocketpp

在没接触 Windows 开发前，万万没想到 Windows 的编译配置规则这么多。

##### 3.1 阅读 README 和 WiKi

README 和 WiKi 往往包含了编译工程的方法，和使用库的一些注意事项，需要首先关注。

##### 3.2 cmake

下载的源码为了跨平台使用，一般会包含`CMakeLists.txt，`使用 CMake （cmake-gui）工具可编译出工程文件。

##### 3.3 下载依赖库

websocketpp依赖于 boost 和 openSSL，到官网下载对应的库即可。

boost直接到[网址]([https://sourceforge.NET/projects/boost/files/boost-binaries/1.61.0/](https://sourceforge.net/projects/boost/files/boost-binaries/1.61.0/))下载编译好的，省去自己编译了（选择自己对应的ms版本，如VS2015 64位的选择boost_1_61_0-msvc-14.0-64.exe） 。

openSSL也到[网址](http://slproweb.com/products/Win32OpenSSL.html)下载编译好的版本。

#####3.4 工程配置

1. 配置**包含目录**，找到对应的头文件，使代码`编译`通过。配置位置在`VC++目录->包含目录`
2. 配置**库目录**，加载 `lib`静态库，使代码`链接`通过。配置位置在`C/C++->常规->附加包含目录`，`VC++目录->库目录`，`链接器->输入->附加依赖项`，`链接器->常规->附加库目录`，这几个地方都要检查。
3. 配置`预编译`，定义预编译宏。配置位置在`C/C++->预处理器->预处理器定义`。
4. 加载dll`动态库。加载dll有手动和自动两种方式，此处编译选择自动加载，即把 dll 放在和 exe 同一个目录下。
5. 后期生成事件，运行自定义脚本。配置位置在`生成事件->后期生成事件`。由于封装的 SDK 还需要嵌入内部的另外一个 SDK，此处需将三方 SDK 的 dll 拷贝到工程目录中。

#### 4. 打包记录

针对 Release 和 Debug 分别打包出.h、lib、dll。需要注意的是`.h`最好用 C 接口，若有回调函数，需加上`__stdcall`表明函数的调用方式。

###四. 反思和复盘

在本次工作中，自己做得不好的几点：

1. 接到开发任务时，埋头研究浪费了一些时间，最后研究出的方法也不够漂亮和规范。最后还是在同事的指点下，采用了正确的路径，还算不错的完成了工作。
2. 对基本功能不清楚，研究三方库时，没有第一时间阅读 README ，导致浪费了一些时间在编译没必要的库上。如果起初就高屋建瓴的清楚此处 SDK 需要`依赖少`，`支持SSL`，`接口清晰`，那么很快就能排除 easywsclient 和 uWebSocket，而不是编译完了才发现有这些问题。
3. 处理问题过程中，有一些困难点处理完了没有记录下来。当时由于时间紧张，处理完了困难点，顾着高兴忘记了记录，回头再思考其中的细节，想要回忆起全部非常困难。

这次开发任务，有以下几点体会：

1. 向前辈请教思路。接到开发任务时，埋头研究浪费了一些时间，最后研究出的方法也不够漂亮和规范。正确的做法应该是请教相关经验的开发，寻找正确优秀的做事路径。做事道路对了，方向正了，结果大概率也就漂亮了。此处的前辈可以是优秀的相关开发，也可以是`stackoverflow`上的优质回答。注意，此处标明了优秀两字，如果向不够优雅的做法学习，也就限制了做事的上限。
2. 积极的解决问题。陌生领悟肯定存在很多不了解不清楚的知识点，切忌遇到点麻烦就半途而返，转头从零开始，做很多无用功。遇到问题正确思路应该是采用积极的态度解决问题，多搜，多问，多研究。作为初学者遇到的问题，肯定很多人已经遇到过了。
3. 做事原则要清楚。选择三方库或者技术选型时，有些原则一定要清楚，尝试一头扎进细节的东西，要先俯视全局，先看看库或方案是否满足基本原则，不满足的要第一时间 pass 掉，避免做无用功。
4. 知识沉淀很重要。做陌生领域的事情，一定会遇到很多不明白不清楚的知识点，记录下来备忘，并且形成方法论，避免狗熊掰棒子的囧境。



