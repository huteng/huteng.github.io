---
layout: post
category: "read"
title:  "x 的平方根"
tags: [算法]
---

### 题目

实现 `int sqrt(int x)` 函数。

计算并返回 *x* 的平方根，其中 *x* 是非负整数。

由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。

**示例 1:**

```
输入: 4
输出: 2
```

**示例 2:**

```
输入: 8
输出: 2
说明: 8 的平方根是 2.82842..., 
     由于返回类型是整数，小数部分将被舍去。
```

### 思路

利用二分查找，找到中间值即可。

需要注意的测试用例：2147395600，2147395599，1，0

### 第一版解法

暴力二分法

```
class Solution {
public:
    int mySqrt(int x) {
        if (x <= 0) return 0;
        if (x <= 1) return 1;
       
        int low = 0;
        int high = x;
        while (low < high) {
            long mid = low + (high - low) / 2;
            if (mid * mid > x) {
                high = mid;
            } else if (mid * mid < x) {
                low = mid + 1;
            } else {
                return mid;
            }
        }
        return low - 1;
    }
};
```

细节待优化：

1. 数据溢出处理。mid * mid 会出现数据溢出，所以使用max来优化high，实际上除了该方式，也可以将`mid * mid > x` 修改为 `mid > x / mid`。
2. 使用`low-1`以及判断`x <= 1`挺丑陋的，需优化边界条件。

### 二分查找

#### 边界条件

二分查找最重要的就是边界条件，其中主要有三个部分需要注意：1）初始条件 2）while 判断条件 3）左边界与右边界的移动。

首先，`初始条件`在二分查找中意味着**目标值在此范围中**，结合到题目来说，要找的平方根一定在我们初始话定义的 low 与 high 中，不可能在这个范围之外出现。x 的平方根最大不会超过 (x / 2)，所以这里可以将 high 优化为 x / 2 + 1，low 定义为1，在此范围内进行查找。

其次，`while 判断条件`和`左边界与右边界的移动`要结合起来看。while 写成 `<` 或者 `<=`会直接关联着左边界与右边界的移动，在这里我们使用 `<`小于符号来进行问题分析。在 C++， Java 等语言中，整数的触发是向下取整的，所以在本题中，若目标值小于x，进行左边界移动时，如果操作为 `low + 1`，最后得到的值就会比mid大1，得不到想要的正确值。

#### 溢出

在解题时，若x为 2147395600，进行 x * x 并存入 int 类型，会发生溢出的情况。原解法的处理方式是将中间值 mid 放入了 long 类型中。实际上这里我们可以将 `mid * mid > x` 写为 `mid > x / mid`来避免溢出的问题。

### 优化解法

```
int mySqrt(int x) {
    if (x <= 0) return 0;
   
    int low = 1;
    int high = x / 2 + 1; // 优化1
    while (low < high) {
        int mid = low + (high - low + 1) / 2; // 优化2
        if (mid > x / mid) { // 优化3
            high = mid - 1;
        } else if (mid < x / mid) {
            low = mid; // 优化4
        } else {
            return mid;
        }
    }
    return low;
}
```

优化解法后，代码从运算效率和空间效率上，都有一定的提升。